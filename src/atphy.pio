;
; Copyright (c) 2022 No0ne (https://github.com/No0ne)
;
; SPDX-License-Identifier: MIT
;

.program atphy
.side_set 1 opt

restart:
  set    pins, 0                    // set clock to high
  irq    clear 0         side 0     // clear busy flag

receivecheck:
  jmp    pin, sendcheck             // if clock is high, see if we have data to send
  irq    nowait 0                   // clock is being pulled low, set busy flag
  wait   1 gpio, 14  // CLOCKIN=14  // wait for clock to be pulled high

  // we are not sending, look for a start bit (clock high, data low)
  in     pins, 1                    // read in from data
  mov    x, isr                     // move what we read to x
  mov    isr, null                  // clear ISR
  jmp    !x, receive                // if x is low, start the receive process
  jmp    restart                    // not receiving

receive:
  set    pins, 1                [6] // clock low
  set    x, 8                       // set loop counter

receiveloop:
  set    pins, 0                [6] // clock high
  in     pins, 1                [4] // read a bit into ISR
  set    pins, 1                [6] // clock low
  jmp    x--, receiveloop       [4] // iterate
  set    pins, 0                [6] // clock high
  nop                    side 1 [6] // data low
  set    pins, 1                [7] // clock low
  jmp    restart                [7]

sendcheck:
  jmp    !osre, send                // see if we have data to send
  jmp    receivecheck               // no data to send, restart

send:
  irq    nowait 0                   // set busy flag
  set    x, 10                      // number of bits to write out

sendloop:
  set    pins, 0                [6] // clock set to high
  jmp    pin, sendcontinue          // if clock is high, host is still receiving data
  out    null, 32                   // clock was low, clear OSR
  irq    wait 1                     // host wants to send data, notify of failure to send data
  jmp    restart                    // and wait for restart

sendcontinue:
  out    pins, 1                [6] // write out data
  set    pins, 1                [6] // set clock low
  jmp    x--, sendloop          [6]

% c-sdk {

  void atphy_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = atphy_program_get_default_config(offset);
    
    pio_gpio_init(pio, CLOCKOUT);
    pio_gpio_init(pio, DATAOUT);
    
    // Use a frequency high enough to effectivly sample clock and data.
    sm_config_set_clkdiv(&c, 427); // 2560 is 20 µs,  640 is 5 µs,  427 is 3.3333 µs
    sm_config_set_jmp_pin(&c, CLOCKIN);
    sm_config_set_set_pins(&c, CLOCKOUT, 1);
    sm_config_set_sideset_pins(&c, DATAOUT);
    sm_config_set_out_pins(&c, DATAOUT, 1);
    sm_config_set_out_shift(&c, true, true, 11);
    sm_config_set_in_pins(&c, DATAIN);
    sm_config_set_in_shift(&c, true, true, 9);
    
    pio_sm_set_consecutive_pindirs(pio, sm, CLOCKOUT, 2, true);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
  }

%}